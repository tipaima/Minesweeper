import tkinter as tk
from random import shuffle
from tkinter.messagebox import showinfo, showerror

colors = {
    1: 'blue',
    2: 'green',
    3: 'red',
    4: '#A5260A',
    5: 'orange',
    6: 'purple',
    7: 'pink',
    8: 'black'
}


class MyButton(tk.Button):

    def __init__(self, master, x, y, number=0, *args, **kwargs):
        super(MyButton, self).__init__(master, width=3, font='Calibre 15 bold', *args, **kwargs)
        self.x = x
        self.y = y
        self.number = number
        self.is_bomb = False
        self.count_bombs = 0
        self.is_open = False

    def __repr__(self):
        return f'Button x={self.x} y={self.y} ‚Ññ{self.number} {self.is_bomb}'


class bomber:
    window = tk.Tk()
    row = 12
    columns = 12
    bombs = 24
    game_status = False
    first_try = True
    key = 0
    not_flag = 0
    all_open = 0
    end = row * columns - bombs

    # –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
    def __init__(self):
        self.buttons = []
        for i in range(bomber.row + 2):
            # –°–ø–∏—Å–æ–∫ —Å—Ç–æ–ª–±—Ü–æ–≤\–≤–ª–æ–∂–µ–Ω–Ω—ã–π —Ç–∏–ø–æ
            temp = []
            for j in range(bomber.columns + 2):
                # –í—ã–∑—ã–≤–∞–µ–º –∫–ª–∞—Å—Å —Å –∏–∑–º–µ–Ω–µ–Ω–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π –∫–Ω–æ–ø–æ—á–µ–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ—á–µ–∫
                button = MyButton(bomber.window, x=i, y=j)
                button.config(command=lambda btn=button: self.click(btn))
                button.bind('<Button-3>', self.pkm)
                temp.append(button)
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ —Å—Ç—Ä–æ–∫—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
            self.buttons.append(temp)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –ø–∫–º/—É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–ª–∞–≥–∞
    def pkm(self, event):
        button = event.widget
        if button['state'] == 'normal':
            button['state'] = 'disabled'
            button['text'] = 'üö©'
            button['disabledforeground'] = 'red'
            if button.is_bomb:
                bomber.key += 1
            if not button.is_bomb:
                bomber.not_flag += 1
        elif button['text'] == 'üö©':
            button['text'] = ''
            button['state'] = 'normal'
            if button.is_bomb:
                bomber.key -= 1
            if not button.is_bomb:
                bomber.not_flag -= 1

        if bomber.key == bomber.bombs and bomber.not_flag == 0 and bomber.all_open == bomber.end:
            showinfo("–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞", "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤—ã —Å–º–æ–≥–ª–∏")
            self.win_open()

    # –ó–æ–≤–µ–º –≤—Å–µ—Ö –¥—Ä—É–∑–µ–π —á—Ç–æ–±—ã –∏–≥—Ä–∞ –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∞
    def start(self):

        self.create_widgets()

        bomber.window.mainloop()

    # –†–∞–∑–º–µ—Ä –æ–∫–Ω–∞
    @staticmethod
    def size(x, y):
        bomber.window.geometry(f"{x}x{y}")

    # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∏–≥—Ä—ã
    def restart_game(self):
        [child.destroy() for child in self.window.winfo_children()]
        self.__init__()
        self.create_widgets()
        bomber.first_try = True
        bomber.game_status = False

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    def settings(self):
        settings = tk.Toplevel(self.window)
        settings.wm_title('–ù–∞—Å—Ç—Ä–æ–π–∫–∏')
        tk.Label(settings, text='–°–ª–æ–∂–Ω–æ—Å—Ç—å').grid(row=0, column=0)
        entry = tk.Entry(settings)

        tk.Button(settings, text='–ü—Ä–∏–º–µ–Ω–∏—Ç—å', command=lambda: self.change_settings())

    # –¢—É—Ç –≤–∏–∑—É–∞–ª –º–µ–Ω—é—à–∫–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    def change_settings(self):
        settings = tk.Toplevel(self.window)
        settings.wm_title('–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞')

        tk.Label(settings, text='–°—Ç—Ä–æ–∫–∏').grid(row=0, column=0)
        row_change = tk.Entry(settings)
        row_change.insert(0, bomber.row)
        row_change.grid(row=0, column=1, padx=30, pady=30)

        tk.Label(settings, text='–°—Ç–æ–ª–±—Ü—ã').grid(row=1, column=0)
        column_change = tk.Entry(settings)
        column_change.insert(0, bomber.columns)
        column_change.grid(row=1, column=1, padx=30, pady=30)

        tk.Label(settings, text='–ë–æ–º–±—ã').grid(row=2, column=0)
        bomb_change = tk.Entry(settings)
        bomb_change.insert(0, bomber.bombs)
        bomb_change.grid(row=2, column=1, padx=30, pady=30)

        (tk.Button(settings, text='–°–æ—Ö—Ä–∞–Ω–∏—Ç—å', command=lambda: self.change(row_change, column_change, bomb_change))
         .grid(row=3, column=0, columnspan=2))

    # –ú–µ—Ç–æ–¥ –¥–ª—è —Å–º–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫
    def change(self, row, column, bomb):
        try:
            int(row.get()), int(column.get()), int(bomb.get())
        except ValueError:
            showerror('–û—à–∏–±–∫–∞', '–ù–µ –≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω—ã —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ —Å—Ç–æ–ª–±—Ü—ã')
            return

        try:
            if 5 < int(row.get()) < 33 and 5 < int(column.get()) < 33 and 0 < int(bomb.get()):
                bomber.row = int(row.get())
                bomber.columns = int(column.get())
                bomber.bombs = int(bomb.get())
                bomber.end = bomber.row * bomber.columns - bomber.bombs
                self.restart_game()
        except ValueError:
            showerror('–û—à–∏–±–∫–∞', '–ù–µ –≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω—ã —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ —Å—Ç–æ–ª–±—Ü—ã')
            return

    # –î–µ–ª–∞–µ–º –∫–Ω–æ–ø–æ—á–∫–∏ –≤–∏–¥–∏–º—ã–º–∏
    def create_widgets(self):

        bomber.all_open = 0
        bomber.key = 0
        bomber.not_flag = 0

        menu = tk.Menu(self.window)
        self.window.config(menu=menu)

        settings = tk.Menu(menu, tearoff=0)
        settings.add_command(label='–ò–≥—Ä–∞—Ç—å', command=self.restart_game)
        settings.add_command(label='–ù–∞—Å—Ç—Ä–æ–π–∫–∏', command=self.change_settings)
        settings.add_command(label='–í—ã—Ö–æ–¥', command=self.window.destroy)
        menu.add_cascade(label='–°–∞–ø–µ—Ä', menu=settings)

        bomb_count = 1
        for i in range(1, bomber.row + 1):
            for j in range(1, bomber.columns + 1):
                button = self.buttons[i][j]
                button.number = bomb_count
                button.grid(row=i, column=j, stick='NWES')
                bomb_count += 1

        for i in range(1, bomber.row + 1):
            tk.Grid.rowconfigure(self.window, i, weight=1)

        for i in range(1, bomber.columns + 1):
            tk.Grid.columnconfigure(self.window, i, weight=1)

    # –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
    def console_print(self):
        for i in range(1, bomber.row + 1):
            for j in range(1, bomber.columns + 1):
                button = self.buttons[i][j]
                if button.is_bomb:
                    print("B", end=' ')
                else:
                    print(button.count_bombs, end=' ')
            print('')

    # –ù–∞–¥–æ –ø–æ–¥—É–º–∞—Ç—å –≥–¥–µ –±—É–¥—É—Ç –±–æ–º–±—ã
    @staticmethod
    def were_is_bombs(number):
        Seryozha = list(range(1, bomber.columns * bomber.row + 1))
        Seryozha.remove(number)
        shuffle(Seryozha)
        return Seryozha[:bomber.bombs]

    # –ê —ç—Ç–æ –ê—Ä—Ç–µ–º, –æ–Ω –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∞–ø–µ—Ä
    def Artem(self, number: int):
        were = self.were_is_bombs(number)
        print(were)
        for i in range(1, bomber.row + 1):
            for j in range(1, bomber.columns + 1):
                btn = self.buttons[i][j]
                if btn.number in were:
                    btn.is_bomb = True

    # –¢—É—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –≤–µ—Å–µ–ª—å–µ:
    # –û–±—Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ
    def click(self, clicked_button: MyButton):

        if bomber.first_try:
            bomber.first_try = False
            self.Artem(clicked_button.number)
            self.how_many_bombs()
            self.console_print()

        if clicked_button.is_bomb:
            clicked_button.config(text="*", disabledforeground='black')
            clicked_button.is_open = True
            bomber.game_status = True
            showinfo("–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞", "–ú–∏–Ω–∞ –æ–∫–∞–∑–∞–ª–∞—Å—å —Å–∏–ª—å–Ω–µ–µ!")
            self.lose_open()
        else:
            color = colors.get(clicked_button.count_bombs)
            if clicked_button.count_bombs:
                clicked_button.config(text=clicked_button.count_bombs, disabledforeground=color)
                clicked_button.is_open = True
                bomber.all_open += 1
            else:
                self.open_buttons(clicked_button)

        clicked_button.config(state='disabled')
        clicked_button.config(relief=tk.SUNKEN)
        if bomber.key == bomber.bombs and bomber.not_flag == 0 and bomber.all_open == bomber.end:
            showinfo("–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞", "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤—ã —Å–º–æ–≥–ª–∏")
            self.win_open()

    # –ù–∞–π–¥–µ–º –±–æ–º–±—ã
    def how_many_bombs(self):
        for i in range(1, bomber.row + 1):
            for j in range(1, bomber.columns + 1):
                button = self.buttons[i][j]
                count_bombs = 0
                if not button.is_bomb:
                    for x in [-1, 0, 1]:
                        for y in [-1, 0, 1]:
                            around = self.buttons[i + x][j + y]
                            if around.is_bomb:
                                count_bombs += 1
                button.count_bombs = count_bombs

    # –°—É–ø–µ—Ä-–ø—É–ø–µ—Ä-–º–µ–≥–∞-—Å–ª–æ–∂–Ω–æ–µ-–º–Ω–æ–≥–æ—Ö–æ–¥–æ–≤–æ—á–Ω–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ –∑–æ–Ω –±–µ–∑ –∫–Ω–æ–ø–æ–∫
    def open_buttons(self, clicked_button: MyButton):
        # –ì–∏–≥–∞-–º–∞–≥–∞ —Å–ø–∏—Å–æ–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫
        spisok = [clicked_button]
        while spisok:

            # –£–±–µ—Ä–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–Ω–æ–ø–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –µ–µ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
            it_button = spisok.pop()
            # –∑–∞–¥–∞–µ–º —Ü–≤–µ—Ç
            color = colors.get(it_button.count_bombs, 'black')

            # –Ω—É —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
            if it_button.count_bombs:
                it_button.config(text=it_button.count_bombs, disabledforeground=color)
            else:
                it_button.config(text='', disabledforeground=color)

            # –°—Ç–∞–≤–∏–∫ –≤ –∫–Ω–æ–ø–∫–µ –ø–æ–º–µ—Ç–∫—É –æ–± –æ—Ç–∫—Ä—ã—Ç–∏–∏
            it_button.is_open = True
            it_button.config(state='disabled')
            it_button.config(relief=tk.SUNKEN)
            bomber.all_open += 1

            # –ì–∏–≥–∞-–º–∞–≥–∞ –∏ –¥—Ç
            if it_button.count_bombs == 0:
                # –ó–∞–¥–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                x, y = it_button.x, it_button.y
                # –ü–µ—Ä–µ–±–æ—Ä —Å–æ—Å–µ–¥–µ–π
                for neighbour_x in [-1, 0, 1]:
                    for neighbour_y in [-1, 0, 1]:
                        # –ù–∏–∂–µ –∏–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: –Ω–∞–º –Ω—É–∂–Ω—ã —Ç–æ–ª—å–∫–æ —Å–æ—Å–µ–¥–∏ —Å–≤–µ—Ä—Ö—É\—Å–Ω–∏–∑—É\—Å–ª—ã–≤–∞\—Å–ø—Ä–∞–≤–∞ –±–µ–∑ –¥–∏–∞–≥–æ–Ω–∞–ª–µ–π

                        # –í—ã—á–∏—Å–ª—è–µ–º —Å–ª–µ–¥—É—é—â—É—é –∫–Ω–æ–ø–∫—É:
                        # –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ —Ö + –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞-—Å–¥–∏–≤–≥ –ø–æ —Ö –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Å–æ—Å–µ–¥–∞
                        # –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ —É + –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞-—Å–¥–∏–≤–≥ –ø–æ —É –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Å–æ—Å–µ–¥–∞
                        next_button = self.buttons[x + neighbour_x][y + neighbour_y]
                        # –ì–∏–≥–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞
                        # –û—Ç–∫—Ä—ã—Ç–∞ –ª–∏ –∫–Ω–æ–ø–∫–∞
                        # —É–±–µ—Ä–∞–µ–º –Ω–µ–≤–∏–¥–∏–º—ã–µ —Å—Ç–æ–ª–±–∏–∫–∏ –∏ —Å—Ç—Ä–æ—á–∫–∏ (–æ–±–≤–æ–¥–∫—É)
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—ã–ª–∞ –ª–∏ —É–∂–µ —ç—Ç–∞ –∫–Ω–æ–ø–∫–∞
                        if not next_button.is_open and 1 <= next_button.x <= bomber.row and \
                                1 <= next_button.y <= bomber.columns and next_button not in spisok:
                            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
                            spisok.append(next_button)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–¥–µ –±—ã–ª–∏ –º–∏–Ω—ã –ø—Ä–∏ –ø–æ—Ä–∞–∂–µ–Ω–∏–∏
    def lose_open(self):
        for i in range(1, bomber.row + 1):
            for j in range(1, bomber.columns + 1):
                button = self.buttons[i][j]
                if button.is_bomb:
                    button.config(text="*", disabledforeground='black')
                else:
                    color = colors.get(button.count_bombs)
                    if button.count_bombs:
                        button.config(text=button.count_bombs, disabledforeground=color)
                        button.is_open = True
                    else:
                        self.open_buttons(button)
                button.config(state='disabled')
                button.config(relief=tk.SUNKEN)

    def win_open(self):
        for i in range(1, bomber.row + 1):
            for j in range(1, bomber.columns + 1):
                button = self.buttons[i][j]
                if button.is_bomb:
                    button.config(text="üö©", disabledforeground='red')
                else:
                    color = colors.get(button.count_bombs)
                    if button.count_bombs:
                        button.config(text=button.count_bombs, disabledforeground=color)
                        button.is_open = True
                    else:
                        self.open_buttons(button)
                button.config(state='disabled')
                button.config(relief=tk.SUNKEN)


game = bomber()
game.start()
